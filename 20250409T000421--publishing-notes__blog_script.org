#+title:      Publishing notes
#+date:       [2025-04-09 Wed 00:04]
#+filetags:   :blog:script:
#+identifier: 20250409T000421

I'm trying to re-organize all my notes in a flat structure. I found org-denote
to suit my needs. I want to also publish these notes as a static website using
minimal dependencies.

We need to install the required dependencies first. I would want to use
=straight= as the package manager but in the sprit of keeping dependencies to a
minimum:

#+begin_src emacs-lisp :results output silent :tangle build.el
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

=htmlize= is a prerequisite to create html files. We need to install =htmlize=.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (package-install 'htmlize)
#+end_src

I'll use =ox-publish= for this use-case.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (require 'ox-publish)
#+end_src

Let's define some vaiables that control what is to be included in the blog and
what is to be published.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (setq org-publish-project-alist
    (list
      (list "my-org-site"
        :recursive nil
        :base-directory (expand-file-name "./")
        :publishing-directory (expand-file-name "./dist")
        :publishing-function 'org-html-publish-to-html

        :with-author nil
        :with-creator nil
        :with-toc nil
        :section-numbers nil
        :with-date nil
        :with-timestamps nil
        :time-stamp-file nil

        ;; sitemap will behave like an index page
        :auto-sitemap t
        :sitemap-filename "index.org"
        :sitemap-sort-files 'anti-chronologically
        :sitemap-title "Index")))
#+end_src

To remove the validation link, we need to set another variable:

#+begin_src emacs-lisp :results output silent :tangle build.el
  (setq org-html-validation-link nil)
#+end_src

Improving the page styling:

#+begin_src emacs-lisp :results output silent :tangle build.el
  (setq org-html-head-include-scripts nil
        org-html-head-include-default-style nil)
  (setq org-html-head
    (concat
      "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/normalize.css@8.0.1/normalize.css\" />\n"
      "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/sakura.css/css/sakura-vader.css\" />"))
#+end_src

Generate the site output:

#+begin_src emacs-lisp :results output silent :tangle build.el
  (org-publish-all t)
#+end_src

To preview the generated website:

#+begin_src emacs-lisp :results output silent
  (httpd-serve-directory (expand-file-name "./"))
#+end_src

You can stop the http server once you're done previewing

#+begin_src emacs-lisp :results output silent
  (httpd-stop)
#+end_src
