#+title:      Publishing notes
#+date:       [2025-04-09 Wed 00:04]
#+filetags:   :blog:script:
#+identifier: 20250409T000421

I'm trying to re-organize all my notes in a flat structure. I found org-denote
to suit my needs. I want to also publish these notes as a static website using
minimal dependencies.

We need to install the required dependencies first. We can use =straight= as our
package manager.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
        (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

=htmlize= is a prerequisite to create html files. We need to install =htmlize=.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (straight-use-package 'htmlize)
#+end_src

I'll use =ox-publish= for this use-case.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (require 'ox-publish)
#+end_src

Let's define some vaiables that control what is to be included in the blog and
what is to be published.

#+begin_src emacs-lisp :results output silent :tangle build.el
  (setq org-publish-project-alist
    (list
      (list "my-org-site"
        :recursive nil
        :base-directory (expand-file-name "./")
        :publishing-directory (expand-file-name "./")
        :publishing-function 'org-html-publish-to-html
        :with-author nil           ;; Don't include author name
        :with-creator t            ;; Include Emacs and Org versions in footer
        :with-toc t                ;; Include a table of contents
        :section-numbers nil       ;; Don't include section numbers
        :time-stamp-file nil       ;; Don't include time stamp in file

        ;; sitemap will behave like an index page
        :auto-sitemap t
        :sitemap-filename "index.org"
        :sitemap-sort-files 'anti-chronologically
        :sitemap-title "Listing")))
#+end_src

To remove the validation link, we need to set another variable:

#+begin_src emacs-lisp :results output silent :tangle build.el
  (setq org-html-validation-link nil)
#+end_src

Generate the site output:

#+begin_src emacs-lisp :results output silent :tangle build.el
  (org-publish-all t)
#+end_src

To preview the generated website:

#+begin_src emacs-lisp :results output silent
  (httpd-serve-directory (expand-file-name "~/org-denote-dist"))
#+end_src

You can stop the http server once you're done previewing

#+begin_src emacs-lisp :results output silent
  (httpd-stop)
#+end_src
